// // Name: 		JPEG tester.¹// Version:		1.2// Author: 		Greg Simon// Date:		4/29/96, 11/4/96, 5/8/97, 6/20/98// Copyright:	(c) Copyright 1996-1998, Steve Weyer, Greg Simon//				All Rights Reserved Worldwide// // Description:	Example of using the new JPEG tools for Newton.constant kHelloSmallJPG := "\u// --------------DefineGlobalConstant('kVersionNum, 		"1.0");DefineGlobalConstant('kVersionInt, 		"10");DefineGlobalConstant('kBetaVersion, 	"f");DefineGlobalConstant('kVersionString,	kVersionNum & kBetaVersion &		(if not kIgnoreNativeKeyword then $N) &		(if kDebugOn then $D) &		(if kProfileOn then $P) &		"-2");Print(kAppName && kVersionString);DefineGlobalConstant('kNewtsCapeSymbol, '|NewtsCape:NewtsCape|);constant kGIFextension := ".gif";DefineGlobalConstant('kEmptyGlobal, { // from Newt's Cape 1.6g	cache: [], historyPos: 0,				htmlApps: {}, helperApps: {},	imageExtensions: [kGIFextension],	protos: {},	}); DefineGlobalConstant('kJPEGextensions, [".jpg", ".jpeg"]);DefineGlobalConstant('kJPEGmediaType, "image/jpeg");// adjust params/result for current (>= 1.6h) Newt's Cape APIDefineGlobalConstant('kJPEGConvertFunc, func(data, thresh, bpp, anim)// swap thresh/bpp order? 4th arg: ignore anim, supply true for dithering argcall JPEG.Decompress with (data, bpp, thresh, true));DefineGlobalConstant('kJPEGframe, {	//extensions: kJPEGextensions,	// !!!f	addFile: func(type, href, content, options)	begin		local newtscape := GetRoot().(kNewtsCapeSymbol);		if options.cacheOnly		// !!!d		then newtscape:convertImage(type, href, content, options, kJPEGConvertFunc) // don't display		else begin			options.(EnsureInternal('convertImageFn)) := kJPEGConvertFunc; 		// !!!c			newtscape:addFile(type, href, content, options);	// convert,cache,display			end;	end,	});InstallScript := func(partFrame, removeFrame)//func(partFrame) if kDebugOn then AddDeferredCall(func() GetRoot().(kAppSymbol):Open(), nil);/*if GetRoot().(kNewtsCapeSymbol)		// Newt's Cape might not be installed yet?then GetRoot().(kNewtsCapeSymbol):installHelperApp(kJPEGmediaType, kAppSymbol, kJPEGframe)else*/ begin	local gData := GetGlobalVar(kNewtsCapeSymbol);	if not gData	then DefGlobalVar(kNewtsCapeSymbol, gData := EnsureInternal(kEmptyGlobal));	local imgExtensions := gData.imageExtensions;	// for distinguishing URLs for HTMLcache vs. ImageCache	ArrayMunger(imgExtensions, Length(imgExtensions), 0, EnsureInternal(kJPEGextensions), 0, nil); // !!!b	local helperApps	:= gData.helperApps;	local icontentType	:= EnsureInternal(Intern(kJPEGmediaType));	local helperFrame	:= helperApps.(icontentType);	if not helperFrame	then helperApps.(icontentType) := helperFrame := EnsureInternal({});	helperFrame.(EnsureInternal(kAppSymbol)) := kJPEGframe;	end;RemoveScript :=	func(removeFrame)	//nil;/*if GetRoot().(kNewtsCapeSymbol)		// Newt's Cape might not be installed yet?then GetRoot().(kNewtsCapeSymbol):installHelperApp(kJPEGmediaType, kAppSymbol, nil)else*/ begin	local gData := GetGlobalVar(kNewtsCapeSymbol), helperApps, helperFrame;	if gData and		(helperApps := gData.helperApps) and		helperFrame := helperApps.(Intern(kJPEGmediaType))	then RemoveSlot(helperFrame, kAppSymbol);	local imgExtensions, val;	if gData and imgExtensions := gData.imageExtensions	// !!!b	then foreach val in kJPEGextensions		 do if val := LSearch(imgExtensions,val,0,'|str=|,nil)			then ArrayRemoveCount(imgExtensions,val,1);	end;partData := {};