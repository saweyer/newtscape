//AudInbox 1.0//Copyright 2000. S. Weyer. All Rights Reserved Worldwideconstant kAutoPartName := "AudInbox";constant kFileName := "audx";DefineGlobalConstant('kVersionNum, 		"1.0");DefineGlobalConstant('kVersionInt, 		"10");DefineGlobalConstant('kBetaVersion, 	"c");// avoid some compiler warningsDeclareGlobalFn('DeclareGlobalFn, 2);DeclareGlobalFn('DefineGlobalConstant,2);DeclareGlobalFn('IsGlobalConstant,1);DeclareGlobalFn('ClearVBOCache, 1);if not IsGlobalConstant('kBuild20)then DefineGlobalConstant('kBuild20,	// '|Newton 2.0| or '|Newton 2.1|		BeginsWith(SprintObject(platformVersion.platformFile), "Newton"));if not IsGlobalConstant('kBuild1x)then DefineGlobalConstant('kBuild1x, not kBuild20);DefineGlobalConstant('kExpiringVersion, NIL);DefineGlobalConstant('kVersionString,	kVersionNum & kBetaVersion &	(if not kIgnoreNativeKeyword then $N) &	(if kDebugOn then $D) &	(if kProfileOn then $P) &	(if kExpiringVersion then $X) &	(if kBuild20 then "-2"));DefineGlobalConstant('kVersion, kAutoPartName && kVersionString);Print(kFileName & kVersionInt & kBetaVersion &	(if not kIgnoreNativeKeyword then $N	else if language='English	then $2	else Upcase(SPrintObject(language))[0])	& ".pkg");Print(kVersion && DateNTime(time()));DefineGlobalConstant('kPkgSymbol, Intern(kPackageName)); // kAppSymbol='autoPrint(kPkgSymbol);//Print(kAppSymbol);	// sameDefineGlobalConstant('kNewtsCapeSymbol, '|NewtsCape:NewtsCape|);	// for statusDefineGlobalConstant('kNewtsCapeEmptyGlobal, { // from Newt's Cape	cache: [], historyPos: 0,				htmlApps: {}, helperApps: {},	imageExtensions: [".gif"],	protos: {},	}); DefineGlobalConstant('kDocMediaTypes, [		// order corresponds to partData.helperFrames	"audio/x-wav", "audio/x-aiff", "audio/basic",	]);DefineGlobalConstant('kHelperFrameWAV, {transferMode:	'binary,extensions: 	[".wav"],	// different for each MIME(contentType)audioFrame: 	{codec: '|WAV:Simple|,	info: "WAV Audio"},	//	{codec: '|AIFF:Simple|, info: "AIFF Audio"},	//	{codec: '|uLaw:Simple|,	info: "uLaw Audio"},	//	{codec: '|GSM:Simple|,	info: "GSM Audio"},matchFile: func(url, data) // for Inbox testingif LSearch(extensions, url, 0, GetGlobalFn('EndsWith), nil)	// !!!cthen begin	// let SimpleMail audio plugins handle directly	// but just fixup entry if not quite right (e.g., EEtransfer)	local entry := GetRoot().(kNewtsCapeSymbol).optionsAPI.inboxEntry, body;	if entry and (body := entry.body) and body.class <> 'audio	then begin		body.class := 'audio;		body.|MIME:Simple| := audioFrame;		//entry.size := Length(body.data);		EntryChange(entry);		end;	NIL;	end,addFile: func(contentType, url, data, options)begin	local fileName := url, i;	for i := StrLen(url)-1 to 0 by -1	do  if url[i] = $/		then break fileName := Substr(url, i+1,nil);	local user := GetDataDefs('|nameRef.email|):MakeNameRef(GetUserConfig('currentPersona), '|nameRef.email|);	try GetUnionSoup(ROM_inboxsoupname):AddFlushedXmit({			class: 		'ioItem, 			xlabels: 	'[_unfiled, _new],	// !!!b			category:	'|mail:Simple|, 			timestamp: 	Time(),			labels: 	NIL,			state: 		'Received,			// !!!b 'Read,			host:		url,			title: 		fileName,								body:  		{				class: 'audio,				|MIME:Simple|: audioFrame,				title: fileName,				data: data,				},			size: Length(data),				// !!!c. so 'info' will work			cc:  '[],			bcc: '[],			toRef: user,			fromRef: user,			/*fromName:currentPart: 1, canSign: NIL, attachment: TRUE, enclosures: [],sizeStr:dateStr:text: NIL,package: nil,*/			}, 'entryAdded)	onexception |evt.ex|	do begin		GetRoot():Notify(kNotifyAlert, "Inbox Error", currentException().error);		return NIL;		end;	//!!!b. GetRoot().ioBox:?Open();	return TRUE;end,});DefineGlobalConstant('kHelperFrameAIFF, {_proto: 	kHelperFrameWAV,extensions: [".aif", ".aiff"],audioFrame: {codec: '|AIFF:Simple|, info: "AIFF Audio"},});DefineGlobalConstant('kHelperFrameAU, {_proto: 	kHelperFrameWAV,extensions: [".au"],audioFrame: {codec: '|uLaw:Simple|,	info: "uLaw Audio"},});DefineGlobalConstant('kInstallHelperApp, func(contentType, sym, helperApp)if GetRoot().(kNewtsCapeSymbol)	// use built-in installHelperApp if therethen GetRoot().(kNewtsCapeSymbol):installHelperApp(contentType, sym, helperApp)else begin	local gData := GetGlobalVar(kNewtsCapeSymbol);	if not gData	then DefGlobalVar(kNewtsCapeSymbol, gData := EnsureInternal(kNewtsCapeEmptyGlobal)); 	local helperApps := gData.helperApps;	local icontentType := Intern(contentType);	local helperFrame := helperApps.(icontentType); 	if isFrame(helperApp)	then begin // install		if not helperFrame then		helperApps.(EnsureInternal(icontentType)) := helperFrame := EnsureInternal({});		// assume in this version that helperApp has 'addFile		helperFrame.(EnsureInternal(sym)) := helperApp; // add/replace		end	else if helperFrame and Length(RemoveSlot(helperFrame,sym))=0	then RemoveSlot(helperApps, icontentType); // un-install	end;);partData := {	// avoids ensure-internaling at install time?installHelperApp:	kInstallHelperApp,mediaTypes: 		kDocMediaTypes,helperFrames: 		[kHelperFrameWAV, kHelperFrameAIFF, kHelperFrameAU],};InstallScript := func(partFrame, removeFrame)begin	local INT i;	local data := partFrame.partData;	local ARRAY types := data.mediaTypes, helpers := data.helperFrames;	for i:=0 to Length(types)-1	do data:installHelperApp(types[i], kPkgSymbol, helpers[i]);end;RemoveScript :=	func(removeFrame)begin	local contentType;	foreach contentType in kDocMediaTypes	do call kInstallHelperApp with (contentType, kPkgSymbol, nil);end;// =============/*DEBUGGING:getroot().|NewtsCape:NewtsCape|:dispatchfile("test/mod", "SeeingIsBelieving0.mod", getroot().|seeingisbelieving2.mod|.amod, nil)getglobalvar('|NewtsCape:NewtsCape|).helperappsqq := getunionsoup("Inbox"):query(nil);ee := qq:resetToEnd();ee := qq:prev(); ee := qq:entry(); ee := qq:next();http://dialspace.dial.pipex.com/town/road/aah66/getroot().|NewtsCape:NewtsCape|:geturl("http://www.wordsmith.org/words/today.html", nil)to test:Word-a-day pronounces the word at:http://www.wordsmith.org/words/today.html>> http://www.wordsmith.org/words/xanadu.wavA variety of popular WAVs:http://www.dailywav.com/  http://www.dailywav.com/0300md/beamusup.wav  http://www.dailywav.com/0300md/idic.wav  Sound central:http://www.soundcentral.com/main.html Files in WAV and Psion format:http://www.pocketinfo.org/sounds.html  http://www.pocketinfo.org/sounds/glass.wavhttp://www.riopop.com/aiff_files.htmlhttp://www.audiogalaxy.com/bands/riopop/yaestoyaqui1.aifhttp://www.cse.unsw.edu.au/~mann/sonix/aiff.htmlhttp://www.cse.unsw.edu.au/~mann/sonix/dig.aiffhttp://ftp.arl.mil/~mike/sound/http://ftp.arl.mil/~mike/sound/7:Cool30.auhttp://ftp.arl.mil/~mike/sound/7:Cool30.aiffhttp://www.dotcom-studio.com/list.htmlhttp://www.dotcom-studio.com/tmp/805788120.auhttp://www.dotcom-studio.com/tmp/8633112253.au*/