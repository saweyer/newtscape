Date: Tue, 23 Mar 1999 11:50:10 +0000From: Roger Milne <roger@barking-dog.com> X-Accept-Language: enMIME-Version: 1.0To: Steve Weyer <sweyer@bellatlantic.net> Subject: Re: Any development on MP3 playback on MP2x00 HI!I've posted a version 0.9.1 on the web site, so if you grab that,it has the api calls that you asked about... GetRoot().|ModPlayer:RSM|:AutoPlayWithCallback(theModVBO,aView,aFunctionSymbol); for example:GetRoot().|ModPlayer:RSM|:AutoPlayWithCallback(modVBO,base,'songDoneFunc); ...and in your base view...songDoneFunc(state)begin    // free the modVBO...end;also, you can check...local version := GetRoot().|ModPlayer:RSM|.playerVersion; if version<>nil thenbegin    if version>=3 then    begin        // found a modplayernew enough to have the AutoPlayWithCallback() feature     end;end;I will call this callback under a few circumstances: - the song finished.- The stop button was pressed for the second time in a row.  (The mod will no-longer be available) - The modPlayer App was closed.    When you get that working, let me know before you make it publiclyavailable, in-case we want to bump the version id up again, if I madechanges.   Roger Steve Weyer wrote:>  Sure, I'll revise it.>I don't really know how to do communication between apps properly. >I did find that I can send a message from one app to another by doing something like this (which is what I'm currently doing): >(The mod player app's symbol is '|ModPlayer:RSM|) >so:>// if the modplayer app is installed... if isFrame(GetRoot().|modPlayer:RSM|) then begin>    // open the modplayer if it is not open yet..     if call kViewIsOpenFunc with (GetRoot().|modPlayer:RSM|) = nil then>        GetRoot().|modPlayer:RSM|:Open(); >    // tell it to start playing a mod from this pkg     GetRoot().|modPlayer:RSM|:AutoPlay(kAppSymbol, 'aMod);>end else begin>    // notify user that mod player app needs installed.     :Notify(kNotifyAlert, kAppSymbol, "ModPlayer not installed!");>end;>I will add another function similar to AutoPlay which will accept a bo or vbo and play it directly.>It will work like above, but change the line with the AutoPlay call to this: >GetRoot().|modPlayer:RSM|:AutoPlayWithCallback(yourModAsVBO, callbackFunction);>where callbackFunction is a function with no return value and one parameter which is called by me like this: >// song just finished!>if callbackFunction<>nil then>    call callbackFunction with (['songDone]); >The parameter could be other values in the future, telling you state information, but for now, just respond to 'songDone, and ignore other states you're told of them.  I'll do this sunday (I'm off to Seattle today), but I'll let you know as soon as its' in. Let me know if this all sounds good, or if you know of a better way to do it. >Thinking about it:>I should also have a version function, so you can make sure it's not an old version of the player:>local playerVersion := GetRoot().|modPlayer:RSM|.playerVersion; >...will return a number telling you what version the player is.  For now, lets call the api above, 3 (integer).  If you recieve nil, or any number less than 3, notify the user he/she needs a new modPlayer app. >Does all this make sense?yes, I think so.of course, if all of the online .mod files are zipped (and there's no unzip utility on Newton), it makes this a bit difficult to do anyway... 