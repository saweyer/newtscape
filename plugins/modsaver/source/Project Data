//ModSaver 1.0//Copyright 2000. S. Weyer. All Rights Reserved Worldwideconstant kAutoPartName := "ModSaver";constant kFileName := "mdsv";DefineGlobalConstant('kVersionNum, 		"1.0");DefineGlobalConstant('kVersionInt, 		"10");DefineGlobalConstant('kBetaVersion, 	"a");// avoid some compiler warningsDeclareGlobalFn('DeclareGlobalFn, 2);DeclareGlobalFn('DefineGlobalConstant,2);DeclareGlobalFn('IsGlobalConstant,1);DeclareGlobalFn('ClearVBOCache, 1);if not IsGlobalConstant('kBuild20)then DefineGlobalConstant('kBuild20,	// '|Newton 2.0| or '|Newton 2.1|		BeginsWith(SprintObject(platformVersion.platformFile), "Newton"));if not IsGlobalConstant('kBuild1x)then DefineGlobalConstant('kBuild1x, not kBuild20);DefineGlobalConstant('kExpiringVersion, NIL);DefineGlobalConstant('kVersionString,	kVersionNum & kBetaVersion &	(if not kIgnoreNativeKeyword then $N) &	(if kDebugOn then $D) &	(if kProfileOn then $P) &	(if kExpiringVersion then $X) &	(if kBuild20 then "-2"));DefineGlobalConstant('kVersion, kAutoPartName && kVersionString);Print(kFileName & kVersionInt & kBetaVersion &	(if not kIgnoreNativeKeyword then $N	else if language='English	then $2	else Upcase(SPrintObject(language))[0])	& ".pkg");Print(kVersion && DateNTime(time()));DefineGlobalConstant('kPkgSymbol, Intern(kPackageName)); // kAppSymbol='autoPrint(kPkgSymbol);//Print(kAppSymbol);	// sameDefineGlobalConstant('kNewtSymbol, 		'|NewtDevEnv:TKnollSys|);	// for NewtPackDefineGlobalConstant('kNewtsCapeSymbol, '|NewtsCape:NewtsCape|);	// for statusDefineGlobalConstant('kModPlayerSymbol, '|modPlayer:RSM|);constant kNoAppMsg := "Can't play MOD file, ModPlayer not installed!";DefineGlobalConstant('kNewtsCapeEmptyGlobal, { // from Newt's Cape	cache: [], historyPos: 0,				htmlApps: {}, helperApps: {},	imageExtensions: [".gif"],	protos: {},	}); DefineGlobalConstant('kDocMediaTypes, [	"www/unknown", "text/plain",	]);//constant kMediaExtensionPos := 1;	// require file extension check (see InstallScript)DefineGlobalConstant('kDocExtensions, [".mod"]);DefineGlobalConstant('kModExt, kDocExtensions[0]); 	// only 1 (req)DefineGlobalConstant('kHelperFrameExt, {extensions: 	kDocExtensions,	//nil,transferMode:	'binary,matchFile: func(url, data) // for Inbox testing.  "MOD" signature???	//not extensions or LSearch(extensions, url, 0, GetGlobalFn('EndsWith), nil),	EndsWith(url, kModExt),addFile: func(contentType, url, data, options)begin	local app;	//if not IsReadOnly(data) then		// from other pkg -- debug only?	SetClass(data, 'modFile);	if GetGlobalVar(kNewtSymbol).protos.protoPackage exists // NewtPack installed?	then begin		local i, pkgName := url, store, xpkg; // kModExt := kDocExtensions[0];		for i := StrLen(url)-1 to 0 by -1		do  if url[i] = $/			then break pkgName := Substr(url, i+1,nil);		if not EndsWith(pkgName, kModExt)		then pkgName := pkgName & kModExt;	// nec. for ModPlayer		app := Clone(appFrame);	// ***		app.appSymbol := Intern(pkgName);		app.aMod := data;		app._package := xpkg := Clone(app._package);	// modifiable (here and by NewtPack)		xpkg.shortTitle := pkgName;						// default shortTitle in Extras		xpkg.copyright  := $© & Date(Time()).year & $, && GetUserConfig('name);		local curPkg := {			//_parent: self, NC, ?			_proto: GetGlobalVar(kNewtSymbol).protos.protoPackage,	// NewtPack			appTemplate: app,			// status handling (via NC)			newtscape: GetRoot().(kNewtsCapeSymbol),			error: func(str, errframe)				newtscape:error(str, errframe),			SetStatus: func(type, options)	// see NewtsCape:saveBook			begin				local txt := options.titleText;				local len := StrLen(txt), pos := CharPos(txt,unicodeCR,0);				if pos				then if len > 0 and txt[len-1] >= $0 and txt[len-1] <= $9					then txt := SubStr(txt,pos+1,nil) && SubStr(txt,0,pos) // swap msg and num					else txt[pos] := $ ;				len := options.maxGauge;	// sizeHint				newtscape:setGauge(txt, if len then (options.gauge*len) div 100 else 0, len);				AddProcrastinatedSend(kPkgSymbol, newtscape, 'setGauge, '["",nil,nil], 2000);				RefreshViews();			end,			};		curPkg.progressView := curPkg;		foreach store in GetStores()		do  if xpkg := GetPkgRef(pkgName, store)			then break;		if xpkg		then AsyncConfirm(			"Replace" && pkgName && $?, 'yesNo,			func(x) if x				then begin					SafeRemovePackage(xpkg);					curPkg:savePackage();					end)		else curPkg:savePackage();	// invoke NewtPack immediately		end	else if app := GetRoot().(kModPlayerSymbol) // see appFrame.viewSetupDoneScript	then begin		// no NewtPack. play mod directly (if installed)		app:Open();		app:AutoPlayWithCallback(data,nil,nil);		end	else GetRoot():Notify(kNotifyAlert, kPkgSymbol, kNoAppMsg);	TRUE;	//  handledend,appFrame: {viewClass: clView,viewFlags: 0, viewFormat: 0, viewBounds: SetBounds(0,0,0,0), viewSetupDoneScript: func()begin	local app := GetRoot().(kModPlayerSymbol);	if app	then begin		app:Open();		app:AutoPlay(appSymbol, 'aMod);		end	else :Notify(kNotifyAlert, appSymbol, kNoAppMsg);	AddDeferredSend(self, 'Close, nil);end,aMod: nil,				//***appSymbol: nil,			//***// for NewtPack_package: {	shortTitle: nil,	//***	copyright:	nil,	//***	compressed: 'faster,	icon: {		bits: SetLength(SetClass("\u0000000000040000000000000020002000000000000000000000000000000000000000007FFFFFFE6800000068001C3868001FFC680010207FFFFFFE68001020680010206800F1E06801F3E07FFFFFFE6801F3E06839F3E0683CE1C0682000007FFFFFFE682000006820000069E000006BE000007FFFFFFE03E0000003E0000001C00000000000000000000000000000", 'bits), 144),		mask: SetLength(SetClass("\u0000000000040000000000000020002000000000000000000000000000000000000000007FFFFFFE7800000078001C3878001FFC78001FE07FFFFFFE7FFFFFE07FFFFFE07FFFFFE07FFFFFE07FFFFFFE7801F3E07839F3E0783CE1C0782000007FFFFFFE7FE000007FE000007FE000007FE000007FFFFFFE03E0000003E0000001C00000000000000000000000000000", 'mask), 144),		bounds: RelBounds(0,0,32,32),		},	},},});/*DefineGlobalConstant('kHelperFrameExt, {_proto: 	kHelperFrame,extensions: kDocExtensions, // only these extensions for generic types});*/DefineGlobalConstant('kInstallHelperApp, func(contentType, sym, helperApp)if GetRoot().(kNewtsCapeSymbol)	// use built-in installHelperApp if therethen GetRoot().(kNewtsCapeSymbol):installHelperApp(contentType, sym, helperApp)else begin	local gData := GetGlobalVar(kNewtsCapeSymbol);	if not gData	then DefGlobalVar(kNewtsCapeSymbol, gData := EnsureInternal(kNewtsCapeEmptyGlobal)); 	local helperApps := gData.helperApps;	local icontentType := Intern(contentType);	local helperFrame := helperApps.(icontentType); 	if isFrame(helperApp)	then begin // install		if not helperFrame then		helperApps.(EnsureInternal(icontentType)) := helperFrame := EnsureInternal({});		// assume in this version that helperApp has 'addFile		helperFrame.(EnsureInternal(sym)) := helperApp; // add/replace		end	else if helperFrame and Length(RemoveSlot(helperFrame,sym))=0	then RemoveSlot(helperApps, icontentType); // un-install	end;);InstallScript := func(partFrame, removeFrame)begin	local data := partFrame.partData, contentType; //, i;	foreach /*i,*/ contentType in data.mediaTypes	do data:installHelperApp(contentType, kPkgSymbol, data.helperFrameExt);		//if i <= kMediaExtensionPos then data.helperFrameExt else data.helperFrame);end;RemoveScript :=	func(removeFrame)begin	local contentType;	foreach contentType in kDocMediaTypes	do call kInstallHelperApp with (contentType, kPkgSymbol, nil);end;partData := {	// avoids ensure-internaling at install time?installHelperApp:	kInstallHelperApp,mediaTypes: 		kDocMediaTypes,//helperFrame: 		kHelperFrame,helperFrameExt: 	kHelperFrameExt,};// =============/*DEBUGGING:getroot().|NewtsCape:NewtsCape|:dispatchfile("test/mod", "SeeingIsBelieving0.mod", getroot().|seeingisbelieving2.mod|.amod, nil)getglobalvar('|NewtsCape:NewtsCape|).helperappsgetroot().|seeingisbelieving2.mod|getroot().|modplayer:rsm|._protoqq := getroot().extrasdrawer:getPartCursor("SeeingIsBelieving2.mod", nil, nil)qq:entry()ee := getroot().extrasdrawer:GetPartEntryData(qq:entry())ee.iconstrhexdump(ee.icon.bits, nil)to test:http://www.modarchive.com/cgi/download.cgi?D/dipa-ut.mod	 61Khttp://www.modarchive.com/cgi/download.cgi?K/katakomb.mod	 81Khttp://www.modarchive.com/cgi/download.cgi?V/vemkan.mod		103Khttp://www.modarchive.com/cgi/download.cgi?P/prelude1.mod	213Khttp://www.eskil.dk/eskil/C64/1942.ziphttp://www.eskil.dk/eskil/C64/alf.zip						  8Khttp://www.eskil.dk/eskil/C64/alloyru2.ziphttp://www.cyf-kr.edu.pl/mmedia/music/mod/alive.mod			 56Khttp://www.cyf-kr.edu.pl/mmedia/music/mod/conan.mod			 85K*/